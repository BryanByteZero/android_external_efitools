MANPAGES = $(patsubst doc/%.1.in,doc/%.1,$(wildcard doc/*.1.in))
HELP2MAN = help2man

# Use static keys for experimental purposes.
STATIC_PK_PATH ?= $(ANDROID_BUILD_TOP)/device/intel/common/testkeys/bios/
STATIC_KEK_PATH ?= $(ANDROID_BUILD_TOP)/device/intel/common/testkeys/bios/
STATIC_DB_PATH ?= $(ANDROID_BUILD_TOP)/device/intel/common/testkeys/bios/

ifeq ($(ARCH),x86_64)
	GNUEFI_TOP=$(ANDROID_BUILD_TOP)/prebuilts/tools/linux-x86_64/gnu-efi
	OPENSSL_LIB=$(ANDROID_BUILD_TOP)/prebuilts/tools/linux-x86_64/openssl
	LIBGCC=$(shell $(CC) -print-libgcc-file-name)
else
	ifeq ($(ARCH),ia32)
		GNUEFI_TOP=$(ANDROID_BUILD_TOP)/prebuilts/tools/linux-x86/gnu-efi
		OPENSSL_LIB=$(ANDROID_BUILD_TOP)/prebuilts/tools/linux-x86/openssl
		LIBGCC=$(shell $(CC) -m32 -print-libgcc-file-name)
	endif
endif

OPENSSL=$(shell which openssl)

INCDIR	   = -I$(ANDROID_BUILD_TOP)/external/openssl/include \
             -I$(TOPDIR)include -I$(GNUEFI_TOP)/include \
             -I$(GNUEFI_TOP)/include/efi \
             -I/$(GNUEFI_TOP)/include/efi/$(ARCH) \
             -I/$(GNUEFI_TOP)/include/efi/protocol

CPPFLAGS   = -DCONFIG_$(ARCH)
CFLAGS	   = -O2 -fpic -Wall -fshort-wchar -fno-strict-aliasing -fno-merge-constants -mno-red-zone -fno-stack-protector -g
LDFLAGS	   = -nostdlib
CRTOBJ		= crt0-efi-$(ARCH).o
CRTPATH	= $(GNUEFI_TOP)/lib
CRTOBJS		= $(CRTPATH)/$(CRTOBJ)
# there's a bug in the gnu tools ... the .reloc section has to be
# aligned otherwise the file alignment gets screwed up
LDSCRIPT	= $(GNUEFI_TOP)/lib/elf_$(ARCH)_efi.lds
LDFLAGS		+= -T $(LDSCRIPT) -shared -Bsymbolic $(CRTOBJS) -L $(CRTPATH)
LOADLIBES	= -lefi -lgnuefi $(LIBGCC)
FORMAT		= efi-app-$(ARCH)
OBJCOPY		= objcopy
MYGUID		= 11111111-2222-3333-4444-123456789abc
INSTALL		= install
BINDIR		= $(DESTDIR)/usr/bin
MANDIR		= $(DESTDIR)/usr/share/man/man1
EFIDIR		= $(DESTDIR)/usr/share/efitools/efi
DOCDIR		= $(DESTDIR)/usr/share/efitools

ifeq ($(ARCH),x86_64)
  CFLAGS += -DEFI_FUNCTION_WRAPPER
endif

ifeq ($(ARCH),ia32)
  CFLAGS += -m32
  LDFLAGS += 
endif

%.unsigned.efi: %.so
	$(OBJCOPY) -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel \
		-j .rela -j .reloc --target=$(FORMAT) $*.so $@

%.so: %.o
	$(LD) $(LDFLAGS) $^ -o $@ $(LOADLIBES)
	# check we have no undefined symbols
	nm -D $@ | grep ' U ' && exit 1 || exit 0

%.h: %.auth
	xxd -i $< > $@

%.hash: %.efi hash-to-efi-sig-list
	./hash-to-efi-sig-list $< $@

%.esl: %.crt cert-to-efi-sig-list
	./cert-to-efi-sig-list -g $(MYGUID) $< $@

%.o: %.c
	$(CC) $(INCDIR) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

%.efi.o: %.c
	$(CC) $(INCDIR) $(CFLAGS) $(CPPFLAGS) -fno-toplevel-reorder -DBUILD_EFI -c $< -o $@

%.efi.s: %.c
	$(CC) -S $(INCDIR) $(CFLAGS) $(CPPFLAGS) -fno-toplevel-reorder -DBUILD_EFI -c $< -o $@


%.cer: %.crt
	openssl x509 -in $< -out $@ -outform DER

%-subkey.csr:
	openssl req -new -newkey rsa:2048 -keyout $*-subkey.key -subj "/CN=Subkey $* of KEK/" -out $@ -nodes

%-subkey.crt: %-subkey.csr KEK.crt
	openssl x509 -req -in $< -CA DB.crt -CAkey DB.key -set_serial 1 -out $@ -days 365

%.efi: %.unsigned.efi DB.crt
	sbsign --key DB.key --cert DB.crt --output $@ $<

%.a:
	ar rcv $@ $^

doc/%.1: doc/%.1.in %
	$(HELP2MAN) --no-info -i $< -o $@ ./$*
