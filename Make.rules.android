MANPAGES = $(patsubst doc/%.1.in,doc/%.1,$(wildcard doc/*.1.in))
HELP2MAN = help2man

PREBUILTS_ROOT := $(ANDROID_BUILD_TOP)/hardware/intel/efi_prebuilts/

# Use static keys for experimental purposes.
ifneq ($(LOCKDOWN_KEY_DIR),)
	PK_KEY_PAIR ?= $(LOCKDOWN_KEY_DIR)/PK
	KEK_KEY_PAIR ?= $(LOCKDOWN_KEY_DIR)/KEK
	DB_KEY_PAIR ?= $(LOCKDOWN_KEY_DIR)/DB
else
	PK_KEY_PAIR ?= $(ANDROID_BUILD_TOP)/device/intel/build/testkeys/PK
	KEK_KEY_PAIR ?= $(ANDROID_BUILD_TOP)/device/intel/build/testkeys/KEK
	DB_KEY_PAIR ?= $(ANDROID_BUILD_TOP)/device/intel/build/testkeys/DB
endif

ifeq ($(ARCH),x86_64)
	GNUEFI_TOP=$(PREBUILTS_ROOT)/gnu-efi/linux-x86_64/
	OPENSSL_LIB=$(PREBUILTS_ROOT)/openssl/linux-x86_64/
	LIBGCC=$(shell $(CC) -print-libgcc-file-name)
else
	GNUEFI_TOP=$(PREBUILTS_ROOT)/gnu-efi/linux-x86/
	OPENSSL_LIB=$(PREBUILTS_ROOT)/openssl/linux-x86/
	LIBGCC=$(shell $(CC) -m32 -print-libgcc-file-name)
endif

OPENSSL=$(shell which openssl)

INCDIR	   = -I$(ANDROID_BUILD_TOP)/external/openssl/include \
             -I$(TOPDIR)include -I$(GNUEFI_TOP)/include \
             -I$(GNUEFI_TOP)/include/efi \
             -I/$(GNUEFI_TOP)/include/efi/$(ARCH) \
             -I/$(GNUEFI_TOP)/include/efi/protocol

CPPFLAGS   = -DCONFIG_$(ARCH)
CFLAGS	   = -O2 -fpic -Wall -fshort-wchar -fno-strict-aliasing -fno-merge-constants -mno-red-zone -fno-stack-protector -g
LDFLAGS	   = -nostdlib
CRTOBJ		= crt0-efi-$(ARCH).o
CRTPATH	= $(GNUEFI_TOP)/lib
CRTOBJS		= $(CRTPATH)/$(CRTOBJ)
# there's a bug in the gnu tools ... the .reloc section has to be
# aligned otherwise the file alignment gets screwed up
LDSCRIPT	= $(GNUEFI_TOP)/lib/elf_$(ARCH)_efi.lds
LDFLAGS		+= -T $(LDSCRIPT) -shared -Bsymbolic $(CRTOBJS) -L $(CRTPATH)
LOADLIBES	= -lefi -lgnuefi $(LIBGCC)
FORMAT		= efi-app-$(ARCH)
OBJCOPY		= objcopy
MYGUID		= 11111111-2222-3333-4444-123456789abc
INSTALL		= install
BINDIR		= $(DESTDIR)/usr/bin
MANDIR		= $(DESTDIR)/usr/share/man/man1
EFIDIR		= $(DESTDIR)/usr/share/efitools/efi
DOCDIR		= $(DESTDIR)/usr/share/efitools

ifeq ($(ARCH),x86_64)
  CFLAGS += -DEFI_FUNCTION_WRAPPER
endif

ifeq ($(ARCH),ia32)
  CFLAGS += -m32
  LDFLAGS += 
endif

%.unsigned.efi: %.so
	$(OBJCOPY) -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel \
		-j .rela -j .reloc --target=$(FORMAT) $*.so $@

%.so: %.o
	$(LD) $(LDFLAGS) $^ -o $@ $(LOADLIBES)
	# check we have no undefined symbols
	nm -D $@ | grep ' U ' && exit 1 || exit 0

%.h: %.auth
	xxd -i $< > $@

%.hash: %.efi hash-to-efi-sig-list
	./hash-to-efi-sig-list $< $@

%.esl: %.x509.pem cert-to-efi-sig-list
	./cert-to-efi-sig-list -g $(MYGUID) $< $@

ifeq ($(KEY_PASSPHRASE),)
%.key: %.pk8
	openssl pkcs8 -nocrypt -inform DER -outform PEM -in $^ -out $@
else
%.key: %.pk8
	echo $(KEY_PASSPHRASE) | openssl pkcs8 -passin stdin -inform DER -outform PEM -in $^ -out $@
endif

%.o: %.c
	$(CC) $(INCDIR) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

%.efi.o: %.c
	$(CC) $(INCDIR) $(CFLAGS) $(CPPFLAGS) -fno-toplevel-reorder -DBUILD_EFI -c $< -o $@

%.efi.s: %.c
	$(CC) -S $(INCDIR) $(CFLAGS) $(CPPFLAGS) -fno-toplevel-reorder -DBUILD_EFI -c $< -o $@

%.cer: %.x509.pem
	openssl x509 -in $< -out $@ -outform DER

%-subkey.csr:
	openssl req -new -newkey rsa:2048 -keyout $*-subkey.key -subj "/CN=Subkey $* of KEK/" -out $@ -nodes

%-subkey.x509.pem: %-subkey.csr DB.x509.pem DB.key
	openssl x509 -req -in $< -CA DB.x509.pem -CAkey DB.key -set_serial 1 -out $@ -days 365

%.efi: %.unsigned.efi DB.key DB.x509.pem
	sbsign --key DB.key --cert DB.x509.pem --output $@ $<

%.a:
	ar rcv $@ $^

doc/%.1: doc/%.1.in %
	$(HELP2MAN) --no-info -i $< -o $@ ./$*
